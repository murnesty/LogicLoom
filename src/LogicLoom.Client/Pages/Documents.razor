@page "/documents"
@using LogicLoom.Client.Services
@using Microsoft.AspNetCore.Components.Web
@implements IDisposable
@inject IDocumentCache DocumentCache
@inject IDocumentService DocumentService
@inject NavigationManager NavigationManager

<div class="documents-page">
    <LoadingOverlay IsLoading="@_isLoading" Message="@_loadingMessage" />
    
    <div class="documents-sidebar">
        <div class="sidebar-header">
            <h3>Documents</h3>
            <div class="upload-zone @(_isDragging ? "dragging" : "")" 
                 @ondragenter="HandleDragEnter"
                 @ondragleave="HandleDragLeave"
                 @ondragover:preventDefault
                 @ondrop="HandleDrop">
                <InputFile OnChange="@HandleFileSelected" accept=".docx" class="file-upload" />
                <div class="upload-message">
                    <i class="bi bi-cloud-upload"></i>
                    <span>Drop files here or click to upload</span>
                </div>
            </div>
        </div>
        <div class="sidebar-filters">
            <AdvancedSearch OnFiltersChanged="HandleFiltersChanged" />
        </div>
        <DocumentNavigator 
            SelectedDocumentId="@_currentDocumentId"
            OnDocumentSelectedChanged="ViewDocument" />
        <!-- End sidebar -->
    </div>
    <div class="documents-content">
        <DocumentContentSearch 
            DocumentId="@_currentDocumentId"
            OnSearchResultSelected="HandleSearchResultSelected" />
            
        <div class="document-viewer">
            <div class="view-controls">
                <div class="view-mode-selector">
                    <button class="btn @(_viewMode == "tree" ? "btn-primary" : "btn-outline-secondary")"
                            @onclick="@(() => OnViewModeChanged("tree"))">
                        <i class="bi bi-diagram-3"></i> Tree View
                    </button>
                    <button class="btn @(_viewMode == "virtualized" ? "btn-primary" : "btn-outline-secondary")"
                            @onclick="@(() => OnViewModeChanged("virtualized"))">
                        <i class="bi bi-graph-up"></i> Performance View
                    </button>
                </div>

                @if (_currentDocumentId.HasValue)
                {
                    <button class="btn btn-danger" @onclick="DeleteDocument">
                        <i class="bi bi-trash"></i> Delete
                    </button>
                }
            </div>

            @if (_isUploading)
            {
                <div class="upload-progress">
                    <div class="spinner-border spinner-border-sm" role="status">
                        <span class="visually-hidden">Uploading...</span>
                    </div>
                    <span>Uploading document...</span>
                </div>
            }
            
            @if (_uploadError is not null)
            {
                <div class="alert alert-danger">
                    @_uploadError
                </div>
            }

            @if (_currentDocumentId != null)
            {
                <div class="document-content">
                    @if (_viewMode == "tree" && _treeView != null)
                    {
                        @foreach (var node in _treeView.Nodes)
                        {
                            <TreeNode Node="@node" Level="0" />
                        }
                    }
                    else if (_viewMode == "virtualized")
                    {
                        <VirtualizedDocumentView DocumentId="@_currentDocumentId" />
                    }
                </div>
            }
            else
            {
                <div class="no-document-selected">
                    <div class="message">
                        <i class="bi bi-file-earmark-text"></i>
                        <p>Select a document to view its contents</p>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .documents-page {
        display: flex;
        height: 100vh;
        max-height: 100vh;
        overflow: hidden;
    }

    .documents-sidebar {
        width: 300px;
        flex-shrink: 0;
        display: flex;
        flex-direction: column;
        border-right: 1px solid var(--vscode-panel-border);
        background: var(--vscode-sideBar-background);
    }

    .sidebar-header {
        padding: 1rem;
        border-bottom: 1px solid var(--vscode-panel-border);
    }

    .sidebar-header h3 {
        margin: 0 0 1rem 0;
    }

    .documents-content {
        flex: 1;
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }

    .document-viewer {
        flex: 1;
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }

    .view-controls {
        padding: 8px;
        border-bottom: 1px solid var(--vscode-panel-border);
        background: var(--vscode-editor-background);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .view-mode-selector {
        display: flex;
        gap: 8px;
    }

    .document-content {
        flex: 1;
        overflow: auto;
        padding: 1rem;
    }

    .no-document-selected {
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .no-document-selected .message {
        text-align: center;
        color: var(--vscode-descriptionForeground);
    }

    .no-document-selected .message i {
        font-size: 2em;
        margin-bottom: 8px;
    }

    .upload-progress {
        padding: 1rem;
        display: flex;
        align-items: center;
        gap: 8px;
        background: var(--vscode-editor-background);
        border-bottom: 1px solid var(--vscode-panel-border);
    }

    .file-upload {
        margin-top: 0.5rem;
    }

    .file-upload ::deep input {
        cursor: pointer;
    }

    /* Cursor styles for interactive elements */
    .btn, input[type="radio"] + label {
        cursor: pointer;
    }

    .btn:disabled {
        cursor: not-allowed;
    }

    .sidebar-filters {
        padding: 1rem;
        border-bottom: 1px solid var(--vscode-panel-border);
    }

    .upload-zone {
        border: 2px dashed var(--vscode-panel-border);
        border-radius: 4px;
        padding: 1rem;
        text-align: center;
        transition: all 0.3s ease;
        cursor: pointer;
    }

    .upload-zone.dragging {
        border-color: var(--vscode-button-background);
        background: var(--vscode-button-hoverBackground);
    }

    .upload-message {
        margin-top: 0.5rem;
        color: var(--vscode-descriptionForeground);
        font-size: 0.9em;
    }

    .upload-message i {
        font-size: 1.5em;
        margin-bottom: 0.5rem;
        display: block;
    }
</style>

@code {
    private bool _isLoading;
    private bool _isUploading;
    private bool _isDragging;
    private string? _uploadError;
    private string _loadingMessage = "";
    private DocumentView? _document;
    private DocumentTreeView? _treeView;
    private Guid? _currentDocumentId;
    private string _viewMode = "tree";

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (Guid.TryParse(System.Web.HttpUtility.ParseQueryString(uri.Query).Get("id"), out var documentId))
        {
            await LoadDocument(documentId);
            if (_viewMode == "tree")
            {
                await LoadTreeView(documentId);
            }
        }
    }

    private void HandleDragEnter()
    {
        _isDragging = true;
    }

    private void HandleDragLeave()
    {
        _isDragging = false;
    }

    private async Task HandleDrop(DragEventArgs e)
    {
        _isDragging = false;
        // To be implemented after API endpoints are ready
        await Task.CompletedTask;
    }

    private async Task HandleFiltersChanged(object filters)
    {
        _isLoading = true;
        _loadingMessage = "Applying filters...";
        try
        {
            // To be implemented after API endpoints are ready
            await Task.CompletedTask;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            _isUploading = true;
            _uploadError = null;
            StateHasChanged();

            var file = e.File;
            using var content = new MultipartFormDataContent();
            using var stream = file.OpenReadStream(maxAllowedSize: 10485760); // 10 MB max
            using var streamContent = new StreamContent(stream);
            content.Add(streamContent, "file", file.Name);

            var result = await DocumentService.UploadDocumentAsync(content);
            await LoadDocument(result.DocumentId);

            NavigationManager.NavigateTo($"/documents?id={result.DocumentId}", replace: true);
        }
        catch (Exception ex)
        {
            _uploadError = $"Error uploading document: {ex.Message}";
        }
        finally
        {
            _isUploading = false;
        }
    }

    private async Task LoadDocument(Guid documentId)
    {
        _isLoading = true;
        _loadingMessage = "Loading document...";
        try
        {
            // Try to get from cache first
            var cachedDoc = await DocumentCache.GetAsync<DocumentView>($"doc_{documentId}");
            if (cachedDoc != null)
            {
                _document = cachedDoc;
                _currentDocumentId = documentId;
            }
            else
            {
                _currentDocumentId = documentId;
                _document = await DocumentService.GetDocumentAsync(documentId);
                await DocumentCache.SetAsync($"doc_{documentId}", _document, TimeSpan.FromMinutes(5));
            }
            
            if (_viewMode == "tree")
            {
                await LoadTreeView(documentId);
            }
        }
        catch (Exception ex)
        {
            _uploadError = $"Error loading document: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadTreeView(Guid documentId)
    {
        try
        {
            var cachedTree = await DocumentCache.GetAsync<DocumentTreeView>($"tree_{documentId}");
            if (cachedTree != null)
            {
                _treeView = cachedTree;
            }
            else
            {
                _treeView = await DocumentService.GetDocumentTreeAsync(documentId);
                await DocumentCache.SetAsync($"tree_{documentId}", _treeView, TimeSpan.FromMinutes(5));
            }
        }
        catch (Exception ex)
        {
            _uploadError = $"Error loading tree view: {ex.Message}";
        }
    }

    private async Task DeleteDocument()
    {
        if (!_currentDocumentId.HasValue) return;

        _isLoading = true;
        _loadingMessage = "Deleting document...";
        try
        {
            await DocumentService.DeleteDocumentAsync(_currentDocumentId.Value);
            await DocumentCache.RemoveAsync($"doc_{_currentDocumentId.Value}");
            await DocumentCache.RemoveAsync($"tree_{_currentDocumentId.Value}");
            NavigationManager.NavigateTo("/documents", replace: true);
            _document = null;
            _treeView = null;
            _currentDocumentId = null;
        }
        catch (Exception ex)
        {
            _uploadError = $"Error deleting document: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task ViewDocument(Guid documentId)
    {
        try
        {
            _uploadError = null;
            await LoadDocument(documentId);
            NavigationManager.NavigateTo($"/documents?id={documentId}", replace: true);
        }
        catch (Exception ex)
        {
            _uploadError = $"Error loading document: {ex.Message}";
        }
    }

    private async Task OnViewModeChanged(string newMode)
    {
        _viewMode = newMode;
        if (_currentDocumentId.HasValue)
        {
            if (newMode == "tree")
            {
                await LoadTreeView(_currentDocumentId.Value);
            }
            else
            {
                await LoadDocument(_currentDocumentId.Value);
            }
        }
    }

    private async Task HandleSearchResultSelected(object result)
    {
        // TODO: Implement jumping to search result in document view
        await Task.CompletedTask;
    }

    public void Dispose()
    {
        // Cleanup if needed
    }
}
