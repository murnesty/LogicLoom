@using LogicLoom.Client.Services
@inject IDocumentService DocumentService

<div class="content-search">
    <div class="search-bar">
        <div class="input-group">
            <input type="text" class="form-control" 
                   placeholder="Search within document content..." 
                   @bind="_searchQuery" 
                   @bind:event="oninput"
                   @onkeyup="HandleSearch" />
            <div class="input-group-append">
                <button class="btn btn-outline-secondary" @onclick="PerformSearch">
                    <i class="bi bi-search"></i>
                </button>
            </div>
        </div>
        @if (_searchResults?.Any() == true)
        {
            <div class="search-stats">
                Found @_searchResults.Count results
            </div>
        }
    </div>

    @if (_isSearching)
    {
        <div class="search-loading">
            <div class="spinner-border spinner-border-sm" role="status">
                <span class="visually-hidden">Searching...</span>
            </div>
            <span>Searching...</span>
        </div>
    }
    else if (_searchResults?.Any() == true)
    {
        <div class="search-results">
            @foreach (var result in _searchResults)
            {
                <div class="search-result" @onclick="() => OnResultSelected(result)">
                    <div class="result-preview">@result.Preview</div>
                    <div class="result-metadata">
                        <span class="result-location">@result.Location</span>
                    </div>
                </div>
            }
        </div>
    }
</div>

<style>
    .content-search {
        border-bottom: 1px solid var(--vscode-panel-border);
        background: var(--vscode-editor-background);
        padding: 8px;
    }

    .search-bar {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .search-stats {
        font-size: 0.9em;
        color: var(--vscode-descriptionForeground);
    }

    .search-loading {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 16px;
        color: var(--vscode-descriptionForeground);
    }

    .search-results {
        margin-top: 8px;
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .search-result {
        padding: 8px;
        border-radius: 4px;
        background: var(--vscode-editor-background);
        cursor: pointer;
        border: 1px solid var(--vscode-panel-border);
    }

    .search-result:hover {
        background: var(--vscode-list-hoverBackground);
    }

    .result-preview {
        margin-bottom: 4px;
    }

    .result-metadata {
        font-size: 0.9em;
        color: var(--vscode-descriptionForeground);
    }

    .result-location {
        font-family: var(--vscode-editor-font-family);
    }
</style>

@code {
    [Parameter]
    public Guid? DocumentId { get; set; }

    [Parameter]
    public EventCallback<SearchResult> OnSearchResultSelected { get; set; }

    private string _searchQuery = "";
    private List<SearchResult> _searchResults = new();
    private bool _isSearching;
    private System.Threading.Timer? _searchTimer;

    private async Task HandleSearch()
    {
        if (_searchTimer != null)
        {
            await _searchTimer.DisposeAsync();
        }

        _searchTimer = new System.Threading.Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await PerformSearch();
                _searchTimer = null;
            });
        }, null, 500, System.Threading.Timeout.Infinite);
    }

    private async Task PerformSearch()
    {
        if (string.IsNullOrWhiteSpace(_searchQuery) || DocumentId == null)
        {
            _searchResults.Clear();
            return;
        }

        try
        {
            _isSearching = true;
            StateHasChanged();

            // TODO: Implement actual content search in the DocumentService
            await Task.Delay(100); // Simulate API call
            _searchResults = new List<SearchResult>
            {
                new("Sample result 1", "Line 10"),
                new("Sample result 2", "Line 20")
            };
        }
        finally
        {
            _isSearching = false;
            StateHasChanged();
        }
    }

    private async Task OnResultSelected(SearchResult result)
    {
        await OnSearchResultSelected.InvokeAsync(result);
    }

    public void Dispose()
    {
        if (_searchTimer != null)
        {
            _searchTimer.Dispose();
        }
    }

    public record SearchResult(string Preview, string Location);
}
