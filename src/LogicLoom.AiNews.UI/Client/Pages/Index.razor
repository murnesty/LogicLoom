@page "/"
@using LogicLoom.AiNews.Core.Models
@using LogicLoom.AiNews.UI.Client.Services
@inject AiNewsApiService ApiService

<PageTitle>AI News Dashboard</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12 mb-4">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="display-4">🤖 AI News Dashboard</h1>
                    <p class="lead">Latest developments in artificial intelligence models and research</p>
                </div>
                <div class="text-end">
                    <button class="btn btn-primary btn-lg" @onclick="RefreshLiveData" disabled="@isRefreshing">
                        @if (isRefreshing)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            <span>Refreshing...</span>
                        }
                        else
                        {
                            <i class="oi oi-reload me-2"></i>
                            <span>🔄 Refresh Live Data</span>
                        }
                    </button>
                    @if (!string.IsNullOrEmpty(refreshMessage))
                    {
                        <div class="alert alert-@(refreshSuccess ? "success" : "danger") mt-2 mb-0" role="alert">
                            @refreshMessage
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Latest Models Section -->
        <div class="col-lg-6 mb-4">
            <div class="card h-100">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">📊 Latest AI Models</h5>
                </div>
                <div class="card-body">
                    @if (models == null)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading models...</p>
                        </div>
                    }
                    else if (models.Count == 0)
                    {
                        <p class="text-muted">No models available.</p>
                    }
                    else
                    {
                        <div class="row">
                            @foreach (var model in models.Take(4))
                            {
                                <div class="col-md-6 mb-3">
                                    <div class="card border-0 bg-light">
                                        <div class="card-body p-3">
                                            <h6 class="card-title">@model.Name</h6>
                                            <p class="card-text small text-muted mb-1">@model.Company</p>
                                            <p class="card-text small mb-2">@model.Description</p>
                                            <div class="d-flex justify-content-between align-items-center">
                                                <small class="text-muted">@model.ReleaseDate.ToString("MMM yyyy")</small>
                                                @if (model.IsMultimodal)
                                                {
                                                    <span class="badge bg-success">Multimodal</span>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Trending News Section -->
        <div class="col-lg-6 mb-4">
            <div class="card h-100">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">📰 Trending News</h5>
                </div>
                <div class="card-body">
                    @if (trendingNews == null)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading news...</p>
                        </div>
                    }
                    else if (trendingNews.Count == 0)
                    {
                        <p class="text-muted">No news available.</p>
                    }
                    else
                    {
                        @foreach (var article in trendingNews.Take(3))
                        {
                            <div class="border-bottom pb-3 mb-3">
                                <h6 class="mb-1">@article.Title</h6>
                                <p class="small text-muted mb-1">@article.Source • @article.PublishDate.ToString("MMM dd, yyyy")
                                </p>
                                <p class="small mb-2">@article.Summary</p>
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="badge bg-outline-primary">@article.Category</span>
                                    <small class="text-muted">@string.Join(", ", article.Tags.Take(2))</small>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Model Comparison Section -->
    <div class="row">
        <div class="col-12 mb-4">
            <div class="card">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0">🔍 Model Comparison</h5>
                </div>
                <div class="card-body">
                    @if (models != null && models.Count > 0)
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>Model</th>
                                        <th>Company</th>
                                        <th>Release Date</th>
                                        <th>Context Window</th>
                                        <th>Multimodal</th>
                                        <th>Capabilities</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var model in models)
                                    {
                                        <tr>
                                            <td><strong>@model.Name @model.Version</strong></td>
                                            <td>@model.Company</td>
                                            <td>@model.ReleaseDate.ToString("MMM dd, yyyy")</td>
                                            <td>@model.ContextWindow</td>
                                            <td>
                                                @if (model.IsMultimodal)
                                                {
                                                    <span class="badge bg-success">Yes</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">No</span>
                                                }
                                            </td>
                                            <td>
                                                @foreach (var capability in model.Capabilities.Take(3))
                                                {
                                                    <span class="badge bg-light text-dark me-1">@capability</span>
                                                }
                                                @if (model.Capabilities.Count > 3)
                                                {
                                                    <span class="text-muted">+@(model.Capabilities.Count - 3) more</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">Loading comparison data...</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<AIModel>? models;
    private List<NewsArticle>? trendingNews;
    private bool isRefreshing = false;
    private string? refreshMessage;
    private bool refreshSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            // Load data in parallel
            var modelsTask = ApiService.GetLatestModelsAsync(10);
            var newsTask = ApiService.GetTrendingNewsAsync(5);

            await Task.WhenAll(modelsTask, newsTask);

            models = await modelsTask;
            trendingNews = await newsTask;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
            models = new List<AIModel>();
            trendingNews = new List<NewsArticle>();
        }
    }

    private async Task RefreshLiveData()
    {
        isRefreshing = true;
        refreshMessage = null;
        StateHasChanged();

        try
        {
            // Clear current data
            models = null;
            trendingNews = null;
            StateHasChanged();

            // Call admin refresh endpoint
            var result = await ApiService.RefreshLiveDataAsync();
            
            refreshSuccess = result.Success;
            refreshMessage = result.Message;

            if (result.Success)
            {
                // Reload the dashboard data
                await LoadDashboardData();
                
                if (result.Errors.Any())
                {
                    refreshMessage += $"\n⚠️ Some warnings: {string.Join(", ", result.Errors.Take(2))}";
                }
            }
        }
        catch (Exception ex)
        {
            refreshSuccess = false;
            refreshMessage = $"❌ Error refreshing data: {ex.Message}";
            Console.WriteLine($"Error in refresh: {ex.Message}");
        }
        finally
        {
            isRefreshing = false;
            StateHasChanged();
            
            // Clear message after 10 seconds
            _ = Task.Delay(10000).ContinueWith(_ => 
            {
                refreshMessage = null;
                InvokeAsync(StateHasChanged);
            });
        }
    }
}
